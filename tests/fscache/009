#!/bin/sh
# SPDX-License-Identifier: GPL-2.0+
#
# Linux compiling test (readahead)
#
seq=`basename $0`
seqres=$RESULT_DIR/$(echo $0 | awk '{print $((NF-1))"/"$NF}' FS="/")

# get standard environment, filters and checks
. "${srcdir}/common/rc"

cleanup()
{
	pkill cachefilesd2
	# wait for cachefiles daemon exiting, or the backing files
	# can't be deleted since they are still IN_USE.
	sleep 1

	cd /
	rm -rf $tmp.*
}

_require_erofs
_require_fscache

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
echo "QA output created by $seq"

if [ -z $SCRATCH_DEV ]; then
	SCRATCH_DEV=$tmp/erofs_$seq.img
	rm -f SCRATCH_DEV
fi

localdir="$tmp/$seq"
rm -rf $localdir
mkdir -p $localdir

# collect files
wget --no-check-certificate -P $localdir \
	"https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.18.tar.xz" \
	>> $seqres.full 2>&1 || _fail "failed to wget linux source code"
tar -xf $localdir/linux-5.18.tar.xz -C $localdir >> $seqres.full 2>&1 \
	|| fail "failed to unzip linux source code"
_scratch_mkfs $localdir/linux-5.18 --chunksize=1048576 --blobdev=$tmp/blob.img -Eforce-chunk-indexes \
	>> $seqres.full 2>&1 || _fail "failed to mkfs"

# start the cachefiles daemon with policy POLICY_READ_RA
($CACHEFILESD_PROG -p 0x400 $tmp $tmp >> $seqres.full 2>&1 &)

SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img -o device=blob.img"
_scratch_mount 2>>$seqres.full

overlaydir="$tmp/overlay"
mkdir -p $overlaydir/upper $overlaydir/work $overlaydir/mnt
$MOUNT_PROG -t overlay none \
	-o lowerdir=$SCRATCH_MNT,upperdir=$overlaydir/upper,workdir=$overlaydir/work \
	$overlaydir/mnt 2>>$seqres.full || _fail "failed to mount overlayfs"

cp -f $overlaydir/mnt/arch/x86/configs/x86_64_defconfig $overlaydir/mnt/.config
source /opt/rh/devtoolset-9/enable
make -C $overlaydir/mnt/ olddefconfig >> $seqres.full 2>&1
make -C $overlaydir/mnt/ -s -j $(nproc) >> $seqres.full 2>&1

if [ $? -ne 0 ]; then
	$UMOUNT_PROG $overlaydir/mnt
	_fail "failed to complie linux source code"
fi

$UMOUNT_PROG $overlaydir/mnt
_scratch_unmount

echo Silence is golden
status=0
exit 0
