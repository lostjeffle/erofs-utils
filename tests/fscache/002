#!/bin/sh
# SPDX-License-Identifier: GPL-2.0+
#
# check inline/non-inline/multidev layout in fscache mode
#
seq=`basename $0`
seqres=$RESULT_DIR/$(echo $0 | awk '{print $((NF-1))"/"$NF}' FS="/")

# get standard environment, filters and checks
. "${srcdir}/common/rc"

cleanup()
{
	pkill cachefilesd2
	# wait for cachefiles daemon exiting, or the backing files
	# can't be deleted since they are still IN_USE.
	sleep 1

	cd /
	rm -rf $tmp.*
}

_require_erofs
_require_fscache

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
echo "QA output created by $seq"

if [ -z $SCRATCH_DEV ]; then
	SCRATCH_DEV=$tmp/erofs_$seq.img
	rm -f SCRATCH_DEV
fi

localdir="$tmp/$seq"
rm -rf $localdir
mkdir -p $localdir

# collect files
echo "test" > $localdir/testfile

# prepare the backing file under root cache directory
($CACHEFILESD_PROG $tmp $tmp 2>&1 > $seqres.full &)
_scratch_mkfs $localdir >> $seqres.full 2>&1 || _fail "failed to mkfs"
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"
_scratch_mount
_scratch_unmount

pkill cachefilesd2
sleep 1

# test error path handling when OPEN request fails
($CACHEFILESD_PROG -p 0x001 $tmp $tmp 2>&1 > $seqres.full &)
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"
mount_log=$(_try_scratch_mount 2>&1)
mount_status=$?
[ $mount_status -eq 0 ] && _fail "mount shall not succeed"

echo "$mount_log" | grep -q "No buffer space available" \
	|| _fail "mount failed not as expected ($mount_log)"

echo Silence is golden
status=0
exit 0
